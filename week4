import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('lab4_test.csv')

labels = pd.DataFrame(df['label'])
features = pd.DataFrame(df[['sepal length','sepal width',
                            'petal length','petal width']])

StandScaler = StandardScaler()
StandScaler_features = StandScaler.fit_transform(features)

trn_feats, valid_feats, trn_labels, valid_labels = train_test_split(features, 
                                                                    labels, 
                                                                    test_size=0.25, 
                                                                    shuffle=True,
                                                                    random_state=1)

print("정규화 전")
clf = KNeighborsClassifier(n_neighbors=1)
clf.fit(trn_feats, trn_labels)
print("k = 1  : ", clf.score(valid_feats, valid_labels))

clf = KNeighborsClassifier(n_neighbors=3)
clf.fit(trn_feats, trn_labels)
print("k = 3  : ", clf.score(valid_feats, valid_labels))

clf = KNeighborsClassifier(n_neighbors=5)
clf.fit(trn_feats, trn_labels)
print("k = 5  : ", clf.score(valid_feats, valid_labels))

clf = KNeighborsClassifier(n_neighbors=10)
clf.fit(trn_feats, trn_labels)
print("k = 10 : ", clf.score(valid_feats, valid_labels))

print()
print("정규화 후")

trn_feats, valid_feats, trn_labels, valid_labels = train_test_split(StandScaler_features, 
                                                                    labels, test_size=0.25, 
                                                                    shuffle=True, 
                                                                    random_state=1)

clf = KNeighborsClassifier(n_neighbors=1)
clf.fit(trn_feats, trn_labels)
print("k = 1  : ", clf.score(valid_feats, valid_labels))

clf = KNeighborsClassifier(n_neighbors=3)
clf.fit(trn_feats, trn_labels)
print("k = 3  : ", clf.score(valid_feats, valid_labels))

clf = KNeighborsClassifier(n_neighbors=5)
clf.fit(trn_feats, trn_labels)
print("k = 5  : ", clf.score(valid_feats, valid_labels))

clf = KNeighborsClassifier(n_neighbors=10)
clf.fit(trn_feats, trn_labels)
print("k = 10 : ", clf.score(valid_feats, valid_labels))
